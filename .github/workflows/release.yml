name: Release

on:
  push:
    tags:
      - v*

env:
  CARGO_TERM_COLOR: always

jobs:
  publish:
    name: Publishing for ${{ matrix.job.os }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      matrix:
        rust: [stable]
        job:
          - os: macos-latest
            os-name: macos
            target: x86_64-apple-darwin
            architecture: x86_64
            binary-postfix: ""
            use-cross: false

          - os: windows-latest
            os-name: windows
            target: x86_64-pc-windows-msvc
            architecture: x86_64
            binary-postfix: ".exe"
            use-cross: false
          - os: windows-latest
            os-name: windows
            target: i686-pc-windows-msvc
            architecture: i686
            binary-postfix: ".exe"
            use-cross: false
          - os: windows-latest
            os-name: windows
            target: i586-pc-windows-msvc
            architecture: i586
            binary-postfix: ".exe"
            use-cross: false

          - os: ubuntu-latest
            os-name: linux
            target: x86_64-unknown-linux-gnu
            architecture: x86_64
            binary-postfix: ""
            use-cross: false
          - os: ubuntu-latest
            os-name: linux
            target: i686-unknown-linux-gnu
            architecture: i686
            binary-postfix: ""
            use-cross: false
    steps:
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prerequisites
        shell: bash
        run: |
          if [[ ${{ matrix.job.os-name }} == linux ]]; then
            sudo apt update -y
            sudo apt install -y libudev-dev
            sudo apt install -y libxdo-dev
            sudo apt install -y libxtst-dev
            sudo apt install -y libxtst6
            sudo apt install -y x11-utils
            sudo apt install -y xserver-xorg-core
            sudo apt install -y xserver-xorg
            sudo apt install -y xorg
            sudo apt install -y xorg openbox
            if [[ ${{ matrix.job.architecture }} == i686 ]]; then
              sudo apt install pkg-config-i686-linux-gnu
            else
              sudo apt install -y pkg-config
            fi
          elif [[ ${{ matrix.job.os-name }} == macos ]]; then
            brew install pkg-config
            brew install openssl
          fi

          rustup target add ${{ matrix.job.target }}

      - name: Cargo update
        uses: actions-rs/cargo@v1
        with:
          command: update
          use-cross: ${{ matrix.job.use-cross }}
          toolchain: ${{ matrix.rust }}
          args: --aggressive

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: ${{ matrix.job.use-cross }}
          toolchain: ${{ matrix.rust }}
          args: --release --target ${{ matrix.job.target }}

      - name: Install the strip command
        shell: bash
        run: |
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
              sudo apt update
              sudo apt install -y binutils-aarch64-linux-gnu
          fi

      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.job.target }}/release
          ####### reduce binary size by removing debug symbols #######
          BINARY_NAME=cursor-lock${{ matrix.job.binary-postfix }}
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
            GCC_PREFIX="aarch64-linux-gnu-"
          else
            GCC_PREFIX=""
          fi
          "$GCC_PREFIX"strip $BINARY_NAME
          ########## create tar.gz ##########
          RELEASE_NAME=cursor-lock-${GITHUB_REF/refs\/tags\//}-${{ matrix.job.os-name }}-${{ matrix.job.architecture }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
          ########## create sha256 ##########
          if [[ ${{ runner.os }} == 'Windows' ]]; then
            certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          else
            shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          fi

      - name: Releasing assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.job.target }}/release/cursor-lock-*.tar.gz
            target/${{ matrix.job.target }}/release/cursor-lock-*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
